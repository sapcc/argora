# Configuration file for <https://github.com/sapcc/argora>

metadata:
  url: https://github.com/sapcc/argora

binaries:
  - name:        manager
    fromPackage: ./cmd/manager/
    installTo: bin/

golang:
  autoupdateableDeps: '^github.com/(?:sap-cloud-infrastructure|sapcc)/'
  setGoModVersion: true

golangciLint:
  createConfig: false

githubWorkflow:
  ci:
    enabled: true
    coveralls: false
    ignorePaths:
      - "**.md" # all Markdown files
  pushContainerToGhcr:
    enabled: true
    platforms: "linux/amd64"
    tagStrategy:
      - edge
      - latest
      - semver
      - sha
  license:
    enabled: true

renovate:
  enabled: true
  assignees:
    - defo89
    - SchwarzM
    - xsen84
    - goerangudat
    - videlov

dockerfile:
  enabled: false

reuse:
  enabled: true
  annotations:
    - paths:
        - .github/**
        - .gitignore
        - .dockerignore
        - .golangci.yml
        - .license-scan-overrides.jsonl
        - .license-scan-rules.json
        - Makefile
        - PROJECT
        - go.mod
        - go.sum
        - config/**
        - dist/**
        - docs/**
        - hack/**
      SPDX-FileCopyrightText: SAP SE
      SPDX-License-Identifier: Apache-2.0

verbatim: |
  tilt: FORCE helm-build-local-image
    tilt up --stream -- --BININFO_VERSION $(BININFO_VERSION) --BININFO_COMMIT_HASH $(BININFO_COMMIT_HASH) --BININFO_BUILD_DATE $(BININFO_BUILD_DATE)

  ##@ kubebuilder

  # Image URL to use all building/pushing image targets
  IMG_REPO ?= controller
  IMG_TAG ?= latest
  IMG = "${IMG_REPO}:${IMG_TAG}"

  # Get the currently used golang install path (in GOPATH/bin, unless GOBIN is set)
  ifeq (,$(shell go env GOBIN))
  GOBIN=$(shell go env GOPATH)/bin
  else
  GOBIN=$(shell go env GOBIN)
  endif

  # CONTAINER_TOOL defines the container tool to be used for building images.
  # Be aware that the target commands are only tested with Docker which is
  # scaffolded by default. However, you might want to replace it to use other
  # tools. (i.e. podman)
  CONTAINER_TOOL ?= docker

  # Setting SHELL to bash allows bash commands to be executed by recipes.
  # Options are set to exit when a recipe line exits non-zero or a piped command fails.
  SHELL = /usr/bin/env bash -o pipefail
  .SHELLFLAGS = -ec

  .PHONY: all
  all: build

  ##@ General

  # The help target prints out all targets with their descriptions organized
  # beneath their categories. The categories are represented by '##@' and the
  # target descriptions by '##'. The awk command is responsible for reading the
  # entire set of makefiles included in this invocation, looking for lines of the
  # file as xyz: ## something, and then pretty-format the target and help. Then,
  # if there's a line with ##@ something, that gets pretty-printed as a category.
  # More info on the usage of ANSI control characters for terminal formatting:
  # https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters
  # More info on the awk command:
  # http://linuxcommand.org/lc3_adv_awk.php

  .PHONY: help-ext
  help-ext: ## Display this help.
    @awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

  ##@ Development

  .PHONY: manifests
  manifests: controller-gen
    $(CONTROLLER_GEN) rbac:roleName=manager-role crd webhook paths="./..." output:crd:artifacts:config=config/crd/bases

  .PHONY: gen
  gen: controller-gen
    $(CONTROLLER_GEN) object:headerFile="hack/boilerplate.go.txt" paths="./..."

  .PHONY: fmt
  fmt: ## Run go fmt against code.
    go fmt ./...

  .PHONY: vet
  vet: ## Run go vet against code.
    go vet ./...

  .PHONY: test
  test: manifests gen fmt vet setup-envtest ## Run tests.
    KUBEBUILDER_ASSETS="$(shell $(ENVTEST) use $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN) -p path)" go test $$(go list ./... | grep -Ev "/e2e|/test/utils|/api/|/internal/networkdata|/internal/controller/mock") -coverprofile cover.out

  # TODO(user): To use a different vendor for e2e tests, modify the setup under 'tests/e2e'.
  # The default setup assumes Kind is pre-installed and builds/loads the Manager Docker image locally.
  # Prometheus and CertManager are installed by default; skip with:
  # - PROMETHEUS_INSTALL_SKIP=true
  # - CERT_MANAGER_INSTALL_SKIP=true
  .PHONY: test-e2e
  test-e2e: manifests gen fmt vet ## Run the e2e tests. Expected an isolated environment using Kind.
    @command -v kind >/dev/null 2>&1 || { \
      echo "Kind is not installed. Please install Kind manually."; \
      exit 1; \
    }
    @kind get clusters | grep -q 'kind' || { \
      echo "No Kind cluster is running. Please start a Kind cluster before running the e2e tests."; \
      exit 1; \
    }
    go test ./test/e2e/ -v -ginkgo.v

  .PHONY: lint
  lint: golangci-lint ## Run golangci-lint linter
    $(GOLANGCI_LINT) run

  .PHONY: lint-fix
  lint-fix: golangci-lint ## Run golangci-lint linter and perform fixes
    $(GOLANGCI_LINT) run --fix

  .PHONY: lint-config
  lint-config: golangci-lint ## Verify golangci-lint linter configuration
    $(GOLANGCI_LINT) config verify

  ##@ Build

  .PHONY: build-manager
  build-manager: manifests gen fmt vet ## Build manager binary.
    go build -o bin/manager cmd/manager/main.go

  .PHONY: run
  run: manifests gen fmt vet ## Run a controller from your host.
    go run ./cmd/manager/main.go

  # If you wish to build the manager image targeting other platforms you can use the --platform flag.
  # (i.e. docker build --platform linux/arm64). However, you must enable docker buildKit for it.
  # More info: https://docs.docker.com/develop/develop-images/build_enhancements/
  .PHONY: docker-build
  docker-build: ## Build docker image with the manager.
    $(CONTAINER_TOOL) build -t ${IMG} --build-arg TARGETOS=${TARGETOS} --build-arg TARGETARCH=${TARGETARCH} --build-arg BININFO_VERSION=$(BININFO_VERSION) --build-arg BININFO_COMMIT_HASH=$(BININFO_COMMIT_HASH) --build-arg BININFO_BUILD_DATE=$(BININFO_BUILD_DATE) .

  .PHONY: docker-push
  docker-push: ## Push docker image with the manager.
    $(CONTAINER_TOOL) push ${IMG}

  # PLATFORMS defines the target platforms for the manager image be built to provide support to multiple
  # architectures. (i.e. make docker-buildx IMG=myregistry/mypoperator:0.0.1). To use this option you need to:
  # - be able to use docker buildx. More info: https://docs.docker.com/build/buildx/
  # - have enabled BuildKit. More info: https://docs.docker.com/develop/develop-images/build_enhancements/
  # - be able to push the image to your registry (i.e. if you do not set a valid value via IMG=<myregistry/image:<tag>> then the export will fail)
  # To adequately provide solutions that are compatible with multiple platforms, you should consider using this option.
  PLATFORMS ?= linux/arm64,linux/amd64,linux/s390x,linux/ppc64le
  .PHONY: docker-buildx
  docker-buildx: ## Build and push docker image for the manager for cross-platform support
    # copy existing Dockerfile and insert --platform=${BUILDPLATFORM} into Dockerfile.cross, and preserve the original Dockerfile
    sed -e '1 s/\(^FROM\)/FROM --platform=\$$\{BUILDPLATFORM\}/; t' -e ' 1,// s//FROM --platform=\$$\{BUILDPLATFORM\}/' Dockerfile > Dockerfile.cross
    - $(CONTAINER_TOOL) buildx create --name argora-builder
    $(CONTAINER_TOOL) buildx use argora-builder
    - $(CONTAINER_TOOL) buildx build --push --platform=$(PLATFORMS) --tag ${IMG} -f Dockerfile.cross .
    - $(CONTAINER_TOOL) buildx rm argora-builder
    rm Dockerfile.cross

  .PHONY: build-installer
  build-installer: manifests generate kustomize ## Generate a consolidated YAML with CRDs and deployment.
    mkdir -p dist
    cd config/manager && $(KUSTOMIZE) edit set image controller=${IMG}
    $(KUSTOMIZE) build config/default > dist/install.yaml

  ##@ Deployment

  .PHONY: helm-chart
  helm-chart: kubebuilder kustomize manifests
    $(KUBEBUILDER) edit --plugins=helm/v1-alpha
    kustomize build config/default | yq ea 'select(.kind == "ConfigMap")' > dist/chart/templates/configmap/configmap.yaml
    yq -i '.metadata.namespace="{{ .Release.Namespace }}"' dist/chart/templates/configmap/configmap.yaml
    kustomize build config/default | yq ea 'select(.kind == "Secret")' > dist/chart/templates/secret/secret.yaml
    yq -i '.metadata.namespace="{{ .Release.Namespace }}"' dist/chart/templates/secret/secret.yaml

  .PHONY: helm-lint
  helm-lint: helm helm-chart
    $(HELM) lint dist/chart

  .PHONY: set-image
  set-image:
    yq -i '.controllerManager.container.image.repository="$(IMG_REPO)"' dist/chart/values.yaml
    yq -i '.controllerManager.container.image.tag="$(IMG_TAG)"' dist/chart/values.yaml

  .PHONY: prepare-deploy
  prepare-deploy: helm-chart helm-lint
    $(HELM) template -n argora-system dist/chart > dist/install.yaml
    kubectl create namespace argora-system || true

  .PHONY: helm-build-local-image
  helm-build-local-image: prepare-deploy

  .PHONY: helm-build
  helm-build: set-image prepare-deploy

  .PHONY: install-crd
  install-crd: manifests kustomize ## Install CRDs into the K8s cluster specified in ~/.kube/config.
    $(KUSTOMIZE) build config/crd | $(KUBECTL) apply -f -

  .PHONY: uninstall
  uninstall: manifests kustomize ## Uninstall CRDs from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.
    $(KUSTOMIZE) build config/crd | $(KUBECTL) delete --ignore-not-found=false -f -

  .PHONY: deploy
  deploy: manifests kustomize ## Deploy controller to the K8s cluster specified in ~/.kube/config.
    $(KUSTOMIZE) build config/default | $(KUBECTL) apply -f -

  .PHONY: undeploy
  undeploy: kustomize ## Undeploy controller from the K8s cluster specified in ~/.kube/config. Call with ignore-not-found=true to ignore resource not found errors during deletion.
    $(KUSTOMIZE) build config/default | $(KUBECTL) delete --ignore-not-found=false -f -

  ##@ Dependencies

  ## Location to install dependencies to
  LOCALBIN ?= $(shell pwd)/bin
  $(LOCALBIN):
    mkdir -p $(LOCALBIN)

  ## Tool Binaries
  KUBECTL ?= kubectl
  KUSTOMIZE ?= $(LOCALBIN)/kustomize
  CONTROLLER_GEN ?= $(LOCALBIN)/controller-gen
  ENVTEST ?= $(LOCALBIN)/setup-envtest
  GOLANGCI_LINT = $(LOCALBIN)/golangci-lint
  HELM ?= $(LOCALBIN)/helm
  KUBEBUILDER ?= $(LOCALBIN)/kubebuilder

  ## Tool Versions
  KUSTOMIZE_VERSION ?= v5.5.0
  CONTROLLER_TOOLS_VERSION ?= v0.17.1
  #ENVTEST_VERSION is the version of controller-runtime release branch to fetch the envtest setup script (i.e. release-0.20)
  ENVTEST_VERSION ?= $(shell go list -m -f "{{ .Version }}" sigs.k8s.io/controller-runtime | awk -F'[v.]' '{printf "release-%d.%d", $$2, $$3}')
  #ENVTEST_K8S_VERSION is the version of Kubernetes to use for setting up ENVTEST binaries (i.e. 1.31)
  ENVTEST_K8S_VERSION ?= $(shell go list -m -f "{{ .Version }}" k8s.io/api | awk -F'[v.]' '{printf "1.%d", $$3}')
  GOLANGCI_LINT_VERSION ?= v1.63.4
  HELM_VERSION ?= v3.17.0
  KUBEBUILDER_VERSION ?= v4.5.1

  .PHONY: kustomize
  kustomize: $(KUSTOMIZE) ## Download kustomize locally if necessary.
  $(KUSTOMIZE): $(LOCALBIN)
    $(call go-install-tool,$(KUSTOMIZE),sigs.k8s.io/kustomize/kustomize/v5,$(KUSTOMIZE_VERSION))

  .PHONY: controller-gen
  controller-gen: $(CONTROLLER_GEN) ## Download controller-gen locally if necessary.
  $(CONTROLLER_GEN): $(LOCALBIN)
    $(call go-install-tool,$(CONTROLLER_GEN),sigs.k8s.io/controller-tools/cmd/controller-gen,$(CONTROLLER_TOOLS_VERSION))

  .PHONY: setup-envtest
  setup-envtest: envtest ## Download the binaries required for ENVTEST in the local bin directory.
    @echo "Setting up envtest binaries for Kubernetes version $(ENVTEST_K8S_VERSION)..."
    @$(ENVTEST) use $(ENVTEST_K8S_VERSION) --bin-dir $(LOCALBIN) -p path || { \
      echo "Error: Failed to set up envtest binaries for version $(ENVTEST_K8S_VERSION)."; \
      exit 1; \
    }

  .PHONY: envtest
  envtest: $(ENVTEST) ## Download setup-envtest locally if necessary.
  $(ENVTEST): $(LOCALBIN)
    $(call go-install-tool,$(ENVTEST),sigs.k8s.io/controller-runtime/tools/setup-envtest,$(ENVTEST_VERSION))

  .PHONY: golangci-lint
  golangci-lint: $(GOLANGCI_LINT) ## Download golangci-lint locally if necessary.
  $(GOLANGCI_LINT): $(LOCALBIN)
    $(call go-install-tool,$(GOLANGCI_LINT),github.com/golangci/golangci-lint/cmd/golangci-lint,$(GOLANGCI_LINT_VERSION))

  .PHONY: helm
  helm: $(HELM)
  $(HELM): $(LOCALBIN)
    $(call go-install-tool,$(HELM),helm.sh/helm/v3/cmd/helm,$(HELM_VERSION))

  .PHONY: kubebuilder
  kubebuilder: $(KUBEBUILDER) ## Download kubebuilder locally if necessary.
  $(KUBEBUILDER): $(LOCALBIN)
    $(call go-install-tool,$(KUBEBUILDER),sigs.k8s.io/kubebuilder/v4,$(KUBEBUILDER_VERSION))

  # go-install-tool will 'go install' any package with custom target and name of binary, if it doesn't exist
  # $1 - target path with name of binary
  # $2 - package url which can be installed
  # $3 - specific version of package
  define go-install-tool
  @[ -f "$(1)-$(3)" ] || { \
  set -e; \
  package=$(2)@$(3) ;\
  echo "Downloading $${package}" ;\
  rm -f $(1) || true ;\
  GOBIN=$(LOCALBIN) go install $${package} ;\
  mv $(1) $(1)-$(3) ;\
  } ;\
  ln -sf $(1)-$(3) $(1)
  endef
